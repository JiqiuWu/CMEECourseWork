Starting weekly assessment for Jiqiu, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.50 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week1, Assessment, Week2, .git, Week3

Found the following files in parent directory: README.txt, .gitignore, QUESTIONS.odt, .~lock.QUESTIONS.odt#

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE 2018-19 CourseWork Repository
Do I like this better?
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Title
Works in Week2 in 2018-2019 CMEE program 

Getting Started
Contains Data with test csv files and others, Code with Python scripts learned in Week2(however I haven't finished the align_seqs_better.py, maybe later, really takes time)Sandbox with something emmmm.

Prerequistites
Python and basic biology

Author
Jiqiu Wu - j.wu18@imperial.ac.uk

Acknowledgments
Samraat
Imperial College London
Classmates in CMEE and QMEE
**********************************************************************

Found following files in results directory: ...
Found 20 code files: lc2.py, boilerplate.py, basic_csv.py, cfexercises2.py, dictionary.py, debugme.py, scope.py, cfexercises1.py, tuple.py, basic_io.py, lc1.py, oaks_debugme.py, oaks.py, loops.py, using_name.py, align_seqs.py, sysargv.py, align_seqs_fasta.py, control_flow.py, test_control_flow.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file lc2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some more exercises to understand list comprehension"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
greater_100mm = [greater_100mm for greater_100mm in rainfall if greater_100mm[1] > 100]

print(greater_100mm)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

less_50mm = [less_50mm for less_50mm in rainfall if less_50mm[1] <50]

print(less_50mm)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !). 

greater_100mm = []
for rainfalls in rainfall:
    if rainfalls[1] > 100:
        greater_100mm.append(rainfalls)
        print(greater_100mm)

less_50mm = []
for rainfalls in rainfall:
    if rainfalls[1] <50:
        less_50mm.append(rainfalls)
        print(less_50mm)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]
[('JAN', 111.4)]
[('JAN', 111.4), ('FEB', 126.1)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9)]
[('MAR', 49.9), ('SEP', 27.0)]

**********************************************************************

Code ran without errors

Time consumed = 0.01833s

======================================================================
Inspecting script file boilerplate.py...

File contents are:
**********************************************************************
#!/usr/bin/new/env python3 #shebang

"""Description of this program of application.
      You can use several lines""" #docstring

__appname__ = '[application name here]'
__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'
__license__ = "License for this code/program" #internal variables

## imports ##
import sys # module to interface our program with the operating system

## constants ##

## functions ##
def main(argv):
    """ Main entry point of the program"""
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0

if __name__ == "__main__":
    """Makes sure the "main" function is called from command line"""
    status = main(sys.argv)
    sys.exit("I am exiting right now!")

      	  	  
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This is a boilerplate

**********************************************************************

Encountered error:
I am exiting right now!

======================================================================
Inspecting script file basic_csv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""a script that can improve the understanding of input and output in Python"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

import csv  #import csv module which can handle csv files

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../Data/testcsv.csv','r') #open the testcsv file for reading

csvread = csv.reader(f) #assign the content of csv file to variable csvread
temp = [] #set a null variable waiting for adding value
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0]) #row can be changed to any other words

f.close

# Write a file containing only species name and Body mass
f = open('../Data/testcsv.csv','r') #open the testcsv file for reading
g = open('../Data/bodymass.csv','w') #open the testcsv file for writing

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
	print(row)
	csvwrite.writerow([row[0], row[4]]) #row can be changed to any other words

f.close()  #close the file testcsv.csv
g.close()  #close the file bodymass.csv
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
('The species is', 'Species')
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
('The species is', 'Daubentonia_madagascariensis')
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
('The species is', 'Allocebus_trichotis')
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
('The species is', 'Avahi_laniger')
['Avahi_occidentalis', 'Lemurifo
**********************************************************************

Code ran without errors

Time consumed = 0.01449s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some examples to improve the understanding of if and while loops"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

# What does each of fooXX do? 

import sys #import sys so that the test section can be conducted

def foo1(x = 4):
    return x ** 0.5  # obtain the square root of x

def foo2(x = 4, y = 7):
    if x > y:     
        return x
    return y # obtain the larger one

def foo3(x = 1, y = 2, z = 3):  
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z] #order from small one to big one, but i think there is a problem???let me think about

def foo4(x = 3):
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result # obtain the factorial of x

def foo5(x = 5): 
    if x == 1:
        return 1
    return x * foo5(x - 1) # a recursive function that calculates the factorial of x
     
def foo6(x=5): # Calculate the factorial of x in a different way
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

def main(argv):
    print(foo1(4))
    print(foo2(4,7))
    print(foo3(1, 2, 3))
    print(foo4(3))
    print(foo5(5))
    print(foo6(5))
    return 0


if (__name__ == "__main__"):
    status = main(sys.argv)
sys.exit(status)**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Missing docstrings in one more functions!
.5 pt deducted per missing docstring

Current Points = 92.5

Output (only first 500 characters): 

**********************************************************************
2.0
7
[1, 2, 3]
6
120
120

**********************************************************************

Code ran without errors

Time consumed = 0.01718s

======================================================================
Inspecting script file dictionary.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some exercises to understand list comprehension and dictionary"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa. 
# E.g. 'Chiroptera' : set(['Myotis lucifugus']) etc. 

taxa_dic = {} #set an empty dictionary to hold key and value
taxa_order = list(set([bird[1] for bird in taxa])) #generate a list with no redundant order

for order in taxa_order:
    for bird in taxa:
        if bird[1] == order:
            taxa_dic.setdefault(order,set()).add(bird[0]) #return he key value available in the dictionary
## need further comprehension
print(taxa_dic)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
{'Rodentia': set(['Peromyscus crinitus', 'Mus domesticus', 'Gerbillus henleyi', 'Cleithrionomys rutilus']), 'Afrosoricida': set(['Microgale dobsoni', 'Microgale talazaci']), 'Chiroptera': set(['Myotis lucifugus']), 'Carnivora': set(['Arctocephalus gazella', 'Lyacon pictus', 'Canis lupus'])}

**********************************************************************

Code ran without errors

Time consumed = 0.01413s

======================================================================
Inspecting script file debugme.py...

File contents are:
**********************************************************************
def createabug(x=4):
    y = x**4
    z = 0.
    y = y/z
    return y
createabug(25)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 91.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "debugme.py", line 6, in <module>
    createabug(25)
  File "debugme.py", line 4, in createabug
    y = y/z
ZeroDivisionError: float division by zero

======================================================================
Inspecting script file scope.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some examples to improve the understanding of global and local variables"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'
## Try this first

_a_global = 10

def a_function():
	_a_global = 5
	_a_local = 4
	print("Inside the function, the value is ", _a_global)
	print("Inside the function, the value is ", _a_local)
	return None

a_function()

print("Outside the function, the value is ", _a_global)

## Now try this

_a_global = 10
def a_function():
	global _a_global
	_a_global = 5
	_a_local = 4
	print("Inside the function, the value is ", _a_global)
	print("Inside the function, the value is ", _a_local)
	return None

a_function()
print("Outside the function, the value is", _a_global)**********************************************************************

Testing scope.py...

scope.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('Inside the function, the value is ', 5)
('Inside the function, the value is ', 4)
('Outside the function, the value is ', 10)
('Inside the function, the value is ', 5)
('Inside the function, the value is ', 4)
('Outside the function, the value is', 5)

**********************************************************************

Code ran without errors

Time consumed = 0.01584s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some exercise to improve the understanding of for and while loops"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

#1)
for i in range(3, 17):
    print ('hello') #14 hellos

#2)
for j in range(12):
    if j % 3 == 0:
        print ('hello') #4 hellos

#3)
for j in range(15):
    if j % 5 == 3:
        print ('hello') #3 hellos
    elif j % 4 == 3:
        print ('hello') #3 hellos

#4)
z = 0
while z != 15:
    print ('hello')
    z = z + 3 #5 hellos

#5)
z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print ('hello') #7 hellos
    elif z == 18:
        print ('hello') #1 hellos
    z = z + 1**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.01618s

======================================================================
Inspecting script file tuple.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some examples to understand list comprehension"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# Hints: use the "print" command! You can use list comprehensions!

latin_names = [latin_names[0] for latin_names in birds]
common_names = [common_names[1] for common_names in birds]
mean_body_masses = [mean_body_masses[2] for mean_body_masses in birds]

print(latin_names)
print(common_names)
print(mean_body_masses)**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.01616s

======================================================================
Inspecting script file basic_io.py...

File contents are:
**********************************************************************
############
# FILE INPUT
############
# Open a file for reading
f = open('../Sandbox/test.txt', 'r') #open the txt file for reading
# use "implicit" for loop
# if the object is a file, python will cycle over lines
for line in f: # go through every line of test.txt
	print(line) # as print is in the for loop, print every line of text file

# close the file
f.close

# Same example, skip blank lines
f = open('../Sandbox/test.txt','r') #open the txt file for reading
for line in f:
	if len(line.strip()) > 0: #check if the line is empty
	    print (line)

f.close() #close the file

############
# FILE OUTPUT
############
# Save the elements of a list to a file
list_to_save = range(100) #from 0 to 99
f = open('../Sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()

###########
# STORING OBJECTS
###########
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key":11}

import pickle #import the pickle module, a storage and load? module, maybe save storage space and speed up

f = open('../Sandbox/tessp.p','wb')## note the b: accept binaryfiles
pickle.dump(my_dictionary, f) # save the content of my_dictionary to tessp.p, which can't be read by human and open by editor
f.close()

## Load the data again
f = open('../Sandbox/tessp.p','rb')
another_dictionary = pickle.load(f) #write the the content of my_dictionary in tessp.p into another_dictionary
f.close

print(another_dictionary)

**********************************************************************

Testing basic_io.py...

basic_io.py is a Python script file;
 checking for docstrings...

Found no doctrings!
1 pt deducted

Current Points = 90.5

Output (only first 500 characters): 

**********************************************************************
First Line

Second Line



Third Line



Fourth Line





First Line

Second Line

Third Line

Fourth Line

{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.01891s

======================================================================
Inspecting script file lc1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some exercises to understand list comprehension"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

latin_names = [latin_names[0] for latin_names in birds ]
common_names = [common_names[1] for common_names in birds]
mean_body_masses = [mean_body_masses[2] for mean_body_masses in birds]
print(latin_names)
print(common_names)
print(mean_body_masses)


# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
latin_names = []
common_names = []
mean_body_masses = []    # creat empty lists

for bird in birds:
    latin_names.append(bird[0])
    common_names.append(bird[1])
    mean_body_masses.append(bird[2])    #add respective value to the list
print (latin_names, '\n', common_names, '\n', mean_body_masses)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
(['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor'], '\n', ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow'], '\n', [18.7, 19, 19.5, 19.6, 20.2])

**********************************************************************

Code ran without errors

Time consumed = 0.01210s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'


import csv
import sys
import pdb
import re

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' 

    >>> is_an_oak('Fagus sylvatica')
    False
    >>> is_an_oak('Quercus robur')
    True
    >>> is_an_oak('Quercuss cerris')
    False
    """
    # use Regular expression to match "quercus"
    if re.match('^quercus\s', name, flags=re.I) != None:
        return True
    else:
        return False



def main(argv): 
    f = open('../Data/TestOaksData.csv','r')
    g = open('../Data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    header = next(taxa) #ignore the header
    csvwrite = csv.writer(g)
    csvwrite.writerow(header) # wirte the header to the JustOaksData file
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0] + ' '):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.01959s

======================================================================
Inspecting script file oaks.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some examples to understand loops"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')#check whether string starts with quercus 

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['Quercus robur', 'Quercus cerris', 'Quercus petraea'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])
set(['QUERCUS ROBUR', 'QUERCUS CERRIS', 'QUERCUS PETRAEA'])

**********************************************************************

Code ran without errors

Time consumed = 0.01166s

======================================================================
Inspecting script file loops.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""some exercises to improve the understanding of for loops"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

# for loops in Python
for i in range(5):
    print (i) # the result are 0, 1, 2, 3, 4

my_list = [0, 2, "geronimo", 3.0, True, False]
for k in my_list:
    print (k) # the result are 0, 2, geronimo, 3.0, True, False

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print (total) # the result are 0, 1, 12, 123, 1234

# while loops in Python
z = 0
while z < 100:
    z = z +1
    print (z) # the result are 1,2,....,98,99,100

b = True
while b:
    print ("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
0
1
2
3
4
0
2
geronimo
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c 
**********************************************************************

Code ran without errors

Time consumed = 10.61565s

======================================================================
Inspecting script file using_name.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""an example to improve the understanding of __name__ =='__main__' """

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

if __name__ == '__main__': #so that the script can run itself and be imported
    print ('This program is being run by itself')
else:
	print ('I am being imported form another module')**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
This program is being run by itself

**********************************************************************

Code ran without errors

Time consumed = 0.07929s

======================================================================
Inspecting script file align_seqs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""align seqs script and sequences are from a csv file"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'


import csv

line = []
f = open("../Data/align_seqs.csv","r")
for lines in f.readlines():
    line.append(lines.strip('\n'))
f.close() #open the csv file and read

seq1 = line[0]
seq2 = line[1] #assign one sequence to seq1, the other to seq2

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 

aligned_seqs = open("../Result/aligned_seqs.txt","w")
aligned_seqs.write(my_best_align + "\n" + s1 + "\n"+"Best_score: "+str(my_best_score))
aligned_seqs.close()

**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "align_seqs.py", line 12, in <module>
    f = open("../Data/align_seqs.csv","r")
IOError: [Errno 2] No such file or directory: '../Data/align_seqs.csv'

======================================================================
Inspecting script file sysargv.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""an example to improve the understanding of sys module"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ",len(sys.argv))
print("The arguments are: ",str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
('This is the name of the script: ', 'sysargv.py')
('Number of arguments: ', 1)
('The arguments are: ', "['sysargv.py']")

**********************************************************************

Code ran without errors

Time consumed = 0.10414s

======================================================================
Inspecting script file align_seqs_fasta.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""align seqs script and sequences from two fasta files"""

__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

lines1 = ""
lines2 = "" #generate two empty sequences
f1 = open("../Data/seq1.fasta","r")
f2 = open("../Data/seq2.fasta","r")

next(f1) #ignore the first line
for line in f1.readlines():
    lines1 += line
f1.close()

next(f2) #ignore the first line
for line in f2.readlines():
    lines2 += line
f2.close()

seq1 = lines1.replace('\n', '')
seq2 = lines2.replace('\n', '')


l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 

aligned_seqs = open("../Result/aligned_seqs.txt","w")
aligned_seqs.write(my_best_align + "\n" + s1 + "\n"+"Best_score: "+str(my_best_score))
aligned_seqs.close()**********************************************************************

Testing align_seqs_fasta.py...

align_seqs_fasta.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "align_seqs_fasta.py", line 10, in <module>
    f1 = open("../Data/seq1.fasta","r")
IOError: [Errno 2] No such file or directory: '../Data/seq1.fasta'

======================================================================
Inspecting script file control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes

def test():
    print("__name__ is " + str(__name__))

def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))

    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
	**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.01217s

======================================================================
Inspecting script file test_control_flow.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""


__author__ = 'Jiqiu Wu (j.wu18@imperial.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.

    >>> even_or_odd(10)
    '10 is Even!'

    >>> even_or_odd(5)
    '5 is Odd!'

    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'

    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'

    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

####### I SUPPRESSED THIS BLOCK: WHY? #######

#I guess this is a test instead of a real conducting script, so this section is not necessary

# def main(argv): 
#     print(even_or_odd(22))
#     print(even_or_odd(33))
#     return 0

# if (__name__ == "__main__"):
#     status = main(sys.argv)
############################################

doctest.testmod()   # To run with embedded tests**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.04840s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 90.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!